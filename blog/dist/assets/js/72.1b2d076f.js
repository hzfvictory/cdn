(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{442:function(s,t,a){"use strict";a.r(t);var n=a(24),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("strong",{staticClass:"old-blog"},[s._v("Git恢复上一次的修改")])]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#查看谁修改的代码"}},[s._v("查看谁修改的代码")])]),a("li",[a("a",{attrs:{href:"#git-log"}},[s._v("git log")])]),a("li",[a("a",{attrs:{href:"#git-reset-撤回回退的代码"}},[s._v("git reset & 撤回回退的代码")])]),a("li",[a("a",{attrs:{href:"#tag回退代码"}},[s._v("Tag回退代码")])])])]),a("p"),s._v(" "),a("h3",{attrs:{id:"查看谁修改的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看谁修改的代码"}},[s._v("#")]),s._v(" 查看谁修改的代码")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("git blame\n比如多人协作的情况下线上出问题了，可以通过git blame清楚的知道是谁对文件进行了修改了。下面给出一个例子"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(1)第一步进入到我们的本地git仓库")]),s._v("\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("a\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(2)假如我们是要查看远程的daily/1.1.68分支的修改情况，执行下面的命令")]),s._v("\ngit checkout  remotes"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("daily"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".68")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(3)查看远程分支src/pages/item/ItemTable/ItemTable.js文件的修改")]),s._v("\ngit blame src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("pages"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("item"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ItemTable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ItemTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(4)此时会显示每一行代码的修改者")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"git-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[s._v("#")]),s._v(" git log")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("git log\n\n下面只是给出几种显示log的方式：\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//压缩模式，在每个提交的旁边显示经过精简的提交哈希码和提交信息，以一行显示")]),s._v("\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("oneline\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//图形模式，使用该选项会在输出的左边绘制一张基于文本格式的历史信息表示图。如果你查看的是单个分支的历史记录的话，该选项无效")]),s._v("\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("graph\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 显示所有分支的历史记录")]),s._v("\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("all\n\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"git-reset-撤回回退的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-撤回回退的代码"}},[s._v("#")]),s._v(" git reset & 撤回回退的代码")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("git reflog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" git cherry"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("pick\n\n场景"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 你提交了几个commit，然后用 git reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard 撤销了这些修改，接着你又意识到：你    希  望还原这些修改！\n    原理"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" git reflog 对于恢复项目历史是一个超棒的资源。你可以恢复几乎任何东西 — 任何你commit 过的东西 — 只要通过 reflog。\n\n你可能已经熟悉了 git log 命令，它"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("会显示commit的列表"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("。 git reflog 也是类似的，不过它显示的是一个"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),s._v("发生改变的时间列表"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("。\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("一些注意事项：")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("它涉及的只是"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),s._v("的改变"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("。在你切换分支、用git commit进行提交、以及用 git reset撤销 commit时，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),s._v("会改变，但当你用 git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("撤销时")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("只是替换文件，分支不变"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),s._v(" 并不会改变 — 如前所述，这些修改从来没有被提交过，因此reflog "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("也无法帮助我们恢复它们。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("git reflog不会永远保持。Git 会定期清理那些 “用不到的” "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("对象。不要指望几个月前的提交还一直躺在那里。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("你的reflog就是你的，只是你的。你不能用 git reflog 来恢复另一个开发者没有 push 过的 commit。\n\n下面我们演示一个例子"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(1)第一次修改并提交")]),s._v("\ngit add "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(2)第二次修改和提交")]),s._v("\ngit add "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(3)第三次修改和提交")]),s._v("\ngit add "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(4)取消第三次提交")]),s._v("\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//注意：此时运行git log会没有第三次提交的log信息，但是reflog却可以看到HEAD指针的移动历史")]),s._v("\n下面我们看看git reflog的"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),s._v("的改变历史"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n如果我们要恢复上一次的修改只要执行如下的命令就可以了"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\ngit cherry"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("pick "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("52e3")]),s._v("fa6\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//52e3fa6表示第三次的修改的hash")]),s._v("\n此时运行了git cherry"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("pick之后，我们通过git log可以看到第三次的提交信息了。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h3",{attrs:{id:"tag回退代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag回退代码"}},[s._v("#")]),s._v(" Tag回退代码")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("git add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1.0.0'")]),s._v("\n\ngit tag v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//打tag")]),s._v("\n\ngit push "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u origin master\n\ngit push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("tags  or git push origin v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//本地tag推送到线上")]),s._v("\n\ngit tag  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查看所有的tag")]),s._v("\n\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("d v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//本地删除tag")]),s._v("\n\ngit push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("refs"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("tags"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//本地tag删除了，再执行该句，删除线上tag")]),s._v("\n\ngit checkout v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//切换tag,完成代码回退")]),s._v("\n\ngit show "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),s._v("  or git show v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("tree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查看相关信息")]),s._v("\n\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[s._v("特别注意")]),s._v(" "),a("p",[s._v("通过标签回退版本后，尽量不要改动代码，如果一定要修改代码"),a("code",[s._v("必须马上拉一个分支")]),s._v("，然后当前的主干的分支立即回到原来的位置，否则正在开发的分支可能白干了，并且不能把改动的代码合并到主干，接着在刚拉的分支上改bug,修改完毕后合并在主干上")])]),s._v(" "),a("p",[a("code",[s._v("如果你通过标签回退版本后，立马改了当前的分支，很不幸你就成功的push不到Git上了，看提示的错误：")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("hint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n//更新被拒绝，因为远程包含您所做的工作,大致意思就是你之前的提交的那个库指向同一引用，且低于一个版本，要你集成远程更改\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("blockquote",[a("p",[s._v("有如下几种解决方法：")])]),s._v(" "),a("p",[a("strong",[s._v("1：使用强制push的方法：")])]),s._v(" "),a("p",[s._v("git push -u origin [name] -f")]),s._v(" "),a("p",[s._v("太暴力，峰哥不喜欢 ，这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。")]),s._v(" "),a("p",[a("strong",[s._v("2：push前先将远程repository修改pull下来")])]),s._v(" "),a("p",[s._v("git pull origin [name]")]),s._v(" "),a("p",[s._v("一般会让你解决冲突，然后还要merge一堆破事,不过这个冲突总是要解决的，你就看看是你解决还是等人来解决。")]),s._v(" "),a("p",[a("strong",[s._v("3：若不想merge远程和本地修改，可以先创建新的分支：")])]),s._v(" "),a("p",[s._v("git checkout -b  [name]")]),s._v(" "),a("p",[s._v("然后git push -u origin [name]  万事大吉，实在不行后期你直接 git push origin --delete [name]不留痕迹")])])}),[],!1,null,null,null);t.default=r.exports}}]);