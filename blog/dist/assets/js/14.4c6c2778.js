(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{383:function(t,e,s){"use strict";s.r(e);var a=s(24),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",{staticClass:"old-blog"},[t._v("火")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#react-hooks"}},[t._v("React Hooks")])]),s("li",[s("a",{attrs:{href:"#webassembly"}},[t._v("WebAssembly")])]),s("li",[s("a",{attrs:{href:"#pwa"}},[t._v("PWA")])]),s("li",[s("a",{attrs:{href:"#graphql"}},[t._v("GraphQL")])]),s("li",[s("a",{attrs:{href:"#serverless"}},[t._v("Serverless")])]),s("li",[s("a",{attrs:{href:"#_5g"}},[t._v("5G")])]),s("li",[s("a",{attrs:{href:"#protobuf"}},[t._v("protobuf")])]),s("li",[s("a",{attrs:{href:"#typescript"}},[t._v("Typescript")])]),s("li",[s("a",{attrs:{href:"#flutter"}},[t._v("Flutter")])]),s("li",[s("a",{attrs:{href:"#小程序"}},[t._v("小程序")])])])]),s("p"),t._v(" "),s("h3",{attrs:{id:"react-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-hooks"}},[t._v("#")]),t._v(" React Hooks")]),t._v(" "),s("p",[t._v("2019 年 NPM 库下载量，React 再次荣登前端流行库榜首，用户数量还在不断增长。能保持第一位，React hooks 贡献满满。")]),t._v(" "),s("h3",{attrs:{id:"webassembly"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webassembly"}},[t._v("#")]),t._v(" WebAssembly")]),t._v(" "),s("p",[t._v("WebAssembly 是一种新的字节码格式，目前主流浏览器都已经支WebAssembly。是由主流浏览器厂商组成的 W3C 社区团体制定的一个新的规范。可以接近原生的性能运行，并为诸如C / C ++等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。可以突破前端 3D game、 VR/AR 、 机器视觉、图像处理等运行速度瓶颈。\n和 JS 需要解释执行不同的是，WebAssembly 字节码和底层机器码很相似，可以快速装载运行，因此性能相对于 JS 解释执行而言有了极大的提升。也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行，浏览器厂商需要做的就是根据 WebAssembly 规范实现虚拟机。有了 WebAssembly，在浏览器上可以跑任何语言。从 Coffee 到 TypeScript，到 Babel，这些都是需要转译为 js 才能被执行的，而 WebAssembly 是在浏览器里嵌入 vm，直接执行，不需要转译，执行效率自然高得多。")]),t._v(" "),s("h3",{attrs:{id:"pwa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[t._v("#")]),t._v(" PWA")]),t._v(" "),s("p",[t._v("下一代 Web 应用。先说下当下 WebAPP 和 原生 APP。Web APP 对比 原生APP，开发成本低，适配多种移动设备，不用 IOS/安卓 多套代码，迭代更新容易，省去了审核、发包、各种渠道发布带来的时间损耗，无需安装成本，拿来即用。原生 APP也有它独到的优势，这些是 WebApp 所没有的优势我们也不知道以后会不会有突破。\nPWA 能够显著提高应用加载速度，甚至让 web 应用可以在离线环境使用（Service Worker）。Web 应用能够像原生应用一样被添加到主屏、全屏执行 （Web App Manifest）进一步提高 Web 应用与操作系统集成能力，让 Web 应用能在未被激活时发起推送通知 （Push API 与 Notification API） 等等。")]),t._v(" "),s("h3",{attrs:{id:"graphql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[t._v("#")]),t._v(" GraphQL")]),t._v(" "),s("p",[t._v("GraphQL 是一种新的 API 定义和查询语言，有可能成为新的 REST。它使 UI 组件易于声明式地获取数据，而不必关注后端实现细节。GraphQL 作为一种强大的抽象，可以加快应用开发速度，使代码更容易维护。新的一年，会作为技术点研究并在自己项目试用。")]),t._v(" "),s("h3",{attrs:{id:"serverless"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serverless"}},[t._v("#")]),t._v(" Serverless")]),t._v(" "),s("p",[s("strong",[t._v("阿里云的云服务")])]),t._v(" "),s("p",[t._v("要看")]),t._v(" "),s("p",[t._v("Nodejs 函数入口\nhttps://help.aliyun.com/document_detail/74757.html")]),t._v(" "),s("p",[t._v(".funignore\nhttps://github.com/alibaba/funcraft/blob/master/docs/usage/getting_started-zh.md#funignore")]),t._v(" "),s("p",[t._v("fun deploy\nhttps://help.aliyun.com/document_detail/147077.html")]),t._v(" "),s("p",[t._v("---- 下面不建议看")]),t._v(" "),s("p",[t._v("函数计算冷启动优化最佳实践\nhttps://help.aliyun.com/document_detail/140338.html")]),t._v(" "),s("p",[t._v("绑定自定义域名\nhttps://help.aliyun.com/document_detail/90722.html")]),t._v(" "),s("p",[t._v("CDN 回源至函数计算\nhttps://help.aliyun.com/document_detail/111175.html")]),t._v(" "),s("p",[t._v("配置 VPC 功能(访问rds)\nhttps://help.aliyun.com/knowledge_detail/72959.html")]),t._v(" "),s("p",[t._v("函数计算 Custom Runtime 使用集锦\nhttps://help.aliyun.com/document_detail/146732.html")]),t._v(" "),s("p",[t._v("https://github.com/2627500295/serverless/tree/develop")]),t._v(" "),s("p",[t._v("--- Custom Runtime")]),t._v(" "),s("p",[t._v("自定义 node 版本\nhttps://github.com/2627500295/function-compute-custom-runtime/tree/feature/custom-node-version")]),t._v(" "),s("p",[t._v("使用 babel 运行\nhttps://github.com/2627500295/function-compute-custom-runtime/tree/feature/custom-runtime-babel")]),t._v(" "),s("h3",{attrs:{id:"_5g"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5g"}},[t._v("#")]),t._v(" 5G")]),t._v(" "),s("p",[t._v("2019年一个绕不开的话题就是5G。⾸先，5G 带宽的⼤幅提升带来传统 Web ⻚⾯复杂度的进⼀步提升，如同 2G 到 4G 变⾰过程中⻚⾯从 WAP 的纯⽂本超链接时代变⾰到 4G 全图⽚视频时代。5G 对于⻚⾯的变⾰必将是巨⼤的，但肯定不会⼀蹴⽽就。因为相应的配套设施也需要逐步完善，如硬件性能和浏览器的处理速度。⽽服务端渲染（SSR）肯定是其中⼀个捷径，轻前端重后台，5G 是桥梁，把渲染放后台，不像同构那么简单，需要关注和优化渲染性能。WebAssembly 或许会在这个机遇下得到快速发展，因为它可以⽆缝对接后台多种语⾔，⽽后台渲染的优化也会带来前端⻚⾯研发模式和技术架构的变⾰。")]),t._v(" "),s("h3",{attrs:{id:"protobuf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protobuf"}},[t._v("#")]),t._v(" protobuf")]),t._v(" "),s("h3",{attrs:{id:"typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[t._v("#")]),t._v(" Typescript")]),t._v(" "),s("h3",{attrs:{id:"flutter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flutter"}},[t._v("#")]),t._v(" Flutter")]),t._v(" "),s("h3",{attrs:{id:"小程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小程序"}},[t._v("#")]),t._v(" 小程序")])])}),[],!1,null,null,null);e.default=r.exports}}]);